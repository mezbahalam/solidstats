<%# Enhanced Gem Metadata Index with Modern UI/UX %>
<div class="gem-metadata-index">
  <!-- Page Header -->
  <div class="page-header">
    <div class="header-content">
      <div class="header-title-section">
        <h1 class="page-title">
          <span class="page-icon">üíé</span>
          Gem Dependencies
        </h1>
        <div class="page-subtitle">
          Complete overview of your project's gem dependencies
        </div>
      </div>
      <div class="header-actions">
        <%= link_to refresh_gem_metadata_path, method: :post, 
            class: "action-btn refresh-btn", 
            title: "Refresh gem metadata", 
            aria: { label: 'Refresh gem metadata' },
            data: { turbo_method: :post, confirm: 'This will fetch the latest gem information. Continue?' } do %>
          <i class="fas fa-sync-alt"></i>
          <span class="btn-text">Refresh All</span>
        <% end %>
      </div>
    </div>
  </div>

  <!-- Stats Overview -->
  <div class="stats-overview">
    <% total_gems = @gems.size %>
    <% outdated_gems = @gems.count { |gem| gem.current_version && gem.version && gem.version != gem.current_version } %>
    <% up_to_date_gems = @gems.count { |gem| gem.current_version && gem.version && gem.version == gem.current_version } %>
    <% unavailable_gems = @gems.count { |gem| gem.info == '(API unavailable)' } %>
    
    <div class="stat-card total">
      <div class="stat-icon">üì¶</div>
      <div class="stat-content">
        <div class="stat-number"><%= total_gems %></div>
        <div class="stat-label">Total Gems</div>
      </div>
    </div>
    
    <div class="stat-card outdated">
      <div class="stat-icon">‚ö†Ô∏è</div>
      <div class="stat-content">
        <div class="stat-number"><%= outdated_gems %></div>
        <div class="stat-label">Need Updates</div>
      </div>
    </div>
    
    <div class="stat-card up-to-date">
      <div class="stat-icon">‚úÖ</div>
      <div class="stat-content">
        <div class="stat-number"><%= up_to_date_gems %></div>
        <div class="stat-label">Up to Date</div>
      </div>
    </div>
    
    <div class="stat-card unavailable">
      <div class="stat-icon">‚ùì</div>
      <div class="stat-content">
        <div class="stat-number"><%= unavailable_gems %></div>
        <div class="stat-label">Unavailable</div>
      </div>
    </div>
  </div>

  <!-- Search and Filters -->
  <div class="search-filters">
    <div class="search-section">
      <div class="search-input-wrapper">
        <i class="fas fa-search search-icon"></i>
        <input type="search" 
               class="search-input" 
               id="gem-search" 
               placeholder="Search gems by name..." 
               aria-label="Search gems">
        <button class="clear-search" id="clear-search" style="display: none;">
          <i class="fas fa-times"></i>
        </button>
      </div>
    </div>
    
    <div class="filters-section">
      <div class="filter-group">
        <label class="filter-label">Status:</label>
        <select class="filter-select" id="status-filter">
          <option value="">All</option>
          <option value="outdated">Need Updates</option>
          <option value="up-to-date">Up to Date</option>
          <option value="unavailable">Unavailable</option>
        </select>
      </div>
      
      <div class="filter-group">
        <label class="filter-label">Sort by:</label>
        <select class="filter-select" id="sort-filter">
          <option value="name-asc">Name (A-Z)</option>
          <option value="name-desc">Name (Z-A)</option>
          <option value="status-desc">Status (Updates First)</option>
          <option value="release-desc">Release Date (Newest)</option>
          <option value="release-asc">Release Date (Oldest)</option>
        </select>
      </div>
      
      <div class="filter-group view-toggle-group">
        <label class="filter-label">View:</label>
        <div class="view-toggle">
          <button class="view-toggle-btn active" id="grid-view-btn" title="Grid View" aria-label="Switch to grid view">
            <i class="fas fa-th"></i>
          </button>
          <button class="view-toggle-btn" id="table-view-btn" title="Table View" aria-label="Switch to table view">
            <i class="fas fa-table"></i>
          </button>
        </div>
      </div>
      
      <div class="filter-group export-group" id="export-group" style="display: none;">
        <button class="export-btn" id="export-table-btn" title="Export table data to CSV">
          <i class="fas fa-download"></i>
          Export CSV
        </button>
      </div>
      
      <button class="reset-filters" id="reset-filters">
        <i class="fas fa-undo"></i>
        Reset
      </button>
    </div>
  </div>

  <!-- Loading State -->
  <div class="loading-overlay" id="loading-overlay" style="display: none;">
    <div class="loading-content">
      <div class="loading-spinner"></div>
      <div class="loading-text">Loading gem metadata...</div>
    </div>
  </div>

  <!-- Gems Grid -->
  <div class="gems-container">
    <% if @gems.any? %>
      <div class="gems-grid" id="gems-grid">
        <% @gems.each_with_index do |gem, index| %>
          <div class="gem-card-full <%= 'unavailable' if gem.info == '(API unavailable)' %>" 
               data-gem-name="<%= gem.name.downcase %>"
               data-status="<%= gem.current_version && gem.version && gem.version != gem.current_version ? 'outdated' : (gem.current_version && gem.version && gem.version == gem.current_version ? 'up-to-date' : 'unavailable') %>"
               data-release-date="<%= gem.released&.to_i || 0 %>"
               style="animation-delay: <%= (index * 0.05).round(2) %>s">
            
            <div class="gem-card-header">
              <div class="gem-title-section">
                <h3 class="gem-name"><%= gem.name %></h3>
                <div class="gem-status-badges">
                  <% if gem.current_version && gem.version && gem.version != gem.current_version %>
                    <span class="status-badge upgrade-available" title="Upgrade available">
                      <i class="fas fa-arrow-up"></i>
                      Update Available
                    </span>
                  <% elsif gem.current_version && gem.version && gem.version == gem.current_version %>
                    <span class="status-badge up-to-date" title="Up to date">
                      <i class="fas fa-check"></i>
                      Latest
                    </span>
                  <% elsif gem.info == '(API unavailable)' %>
                    <span class="status-badge unavailable" title="API unavailable">
                      <i class="fas fa-exclamation-triangle"></i>
                      Unavailable
                    </span>
                  <% end %>
                </div>
              </div>
            </div>

            <div class="gem-card-body">
              <div class="versions-section">
                <div class="version-group">
                  <div class="version-item">
                    <span class="version-label">Current</span>
                    <% if gem.current_version %>
                      <span class="version-badge current" title="Current version">
                        <%= gem.current_version %>
                      </span>
                    <% else %>
                      <span class="version-badge unknown">N/A</span>
                    <% end %>
                  </div>
                  
                  <div class="version-item">
                    <span class="version-label">Latest</span>
                    <% if gem.version %>
                      <span class="version-badge latest" title="Latest version">
                        <%= gem.version %>
                      </span>
                    <% else %>
                      <span class="version-badge unknown">N/A</span>
                    <% end %>
                  </div>
                </div>
              </div>

              <div class="gem-info-section">
                <div class="release-info">
                  <i class="fas fa-calendar-alt"></i>
                  <% if gem.released %>
                    <span title="<%= gem.released.strftime('%Y-%m-%d %H:%M') %>">
                      <%= time_ago_in_words(gem.released) %> ago
                    </span>
                  <% else %>
                    <span>Unknown release date</span>
                  <% end %>
                </div>
                
                <% if gem.info && gem.info != '(API unavailable)' %>
                  <div class="gem-description">
                    <i class="fas fa-info-circle"></i>
                    <span title="<%= gem.info %>"><%= truncate(gem.info, length: 120) %></span>
                  </div>
                <% end %>
              </div>

              <% if gem.runtime&.any? %>
                <div class="dependencies-section">
                  <div class="deps-header">
                    <i class="fas fa-cubes"></i>
                    <span>Dependencies (<%= gem.runtime.size %>)</span>
                  </div>
                  <div class="deps-grid">
                    <% gem.runtime.first(6).each do |dep| %>
                      <span class="dep-badge <%= 'rails-dep' if dep['name'] == 'rails' %>" 
                            title="<%= dep['name'] %> <%= dep['requirements'] %>">
                        <%= dep['name'] %>
                        <span class="dep-version"><%= dep['requirements'] %></span>
                      </span>
                    <% end %>
                    <% if gem.runtime.size > 6 %>
                      <span class="dep-more" 
                            title="<%= gem.runtime.drop(6).map { |d| "#{d['name']} #{d['requirements']}" }.join(', ') %>">
                        +<%= gem.runtime.size - 6 %> more
                      </span>
                    <% end %>
                  </div>
                </div>
              <% end %>
            </div>
          </div>
        <% end %>
      </div>
      
      <!-- Table View (Hidden by default) -->
      <div class="gems-table-container" id="gems-table-container" style="display: none;">
        <div class="table-wrapper">
          <table class="gems-table" id="gems-table">
            <thead>
              <tr>
                <th class="sortable" data-sort="name">
                  <span>Gem Name</span>
                  <i class="fas fa-sort sort-icon"></i>
                </th>
                <th class="sortable" data-sort="status">
                  <span>Status</span>
                  <i class="fas fa-sort sort-icon"></i>
                </th>
                <th class="sortable" data-sort="current">
                  <span>Current</span>
                  <i class="fas fa-sort sort-icon"></i>
                </th>
                <th class="sortable" data-sort="latest">
                  <span>Latest</span>
                  <i class="fas fa-sort sort-icon"></i>
                </th>
                <th class="sortable" data-sort="released">
                  <span>Released</span>
                  <i class="fas fa-sort sort-icon"></i>
                </th>
                <th>Description</th>
                <th>Dependencies</th>
              </tr>
            </thead>
            <tbody id="gems-table-body">
              <% @gems.each do |gem| %>
                <tr class="gem-table-row <%= 'unavailable' if gem.info == '(API unavailable)' %>" 
                    data-gem-name="<%= gem.name.downcase %>"
                    data-status="<%= gem.current_version && gem.version && gem.version != gem.current_version ? 'outdated' : (gem.current_version && gem.version && gem.version == gem.current_version ? 'up-to-date' : 'unavailable') %>"
                    data-release-date="<%= gem.released&.to_i || 0 %>">
                  
                  <td class="gem-name-cell">
                    <strong class="gem-name-table"><%= gem.name %></strong>
                  </td>
                  
                  <td class="status-cell">
                    <% if gem.current_version && gem.version && gem.version != gem.current_version %>
                      <span class="status-badge-table upgrade-available" title="Upgrade available">
                        <i class="fas fa-arrow-up"></i>
                        Update Available
                      </span>
                    <% elsif gem.current_version && gem.version && gem.version == gem.current_version %>
                      <span class="status-badge-table up-to-date" title="Up to date">
                        <i class="fas fa-check"></i>
                        Latest
                      </span>
                    <% elsif gem.info == '(API unavailable)' %>
                      <span class="status-badge-table unavailable" title="API unavailable">
                        <i class="fas fa-exclamation-triangle"></i>
                        Unavailable
                      </span>
                    <% else %>
                      <span class="status-badge-table unknown">
                        Unknown
                      </span>
                    <% end %>
                  </td>
                  
                  <td class="version-cell">
                    <% if gem.current_version %>
                      <span class="version-badge-table current" title="Current version">
                        <%= gem.current_version %>
                      </span>
                    <% else %>
                      <span class="version-badge-table unknown">N/A</span>
                    <% end %>
                  </td>
                  
                  <td class="version-cell">
                    <% if gem.version %>
                      <span class="version-badge-table latest" title="Latest version">
                        <%= gem.version %>
                      </span>
                    <% else %>
                      <span class="version-badge-table unknown">N/A</span>
                    <% end %>
                  </td>
                  
                  <td class="release-cell">
                    <% if gem.released %>
                      <span title="<%= gem.released.strftime('%Y-%m-%d %H:%M') %>">
                        <%= time_ago_in_words(gem.released) %> ago
                      </span>
                    <% else %>
                      <span class="text-muted">Unknown</span>
                    <% end %>
                  </td>
                  
                  <td class="description-cell">
                    <% if gem.info && gem.info != '(API unavailable)' %>
                      <span title="<%= gem.info %>"><%= truncate(gem.info, length: 80) %></span>
                    <% else %>
                      <span class="text-muted">No description available</span>
                    <% end %>
                  </td>
                  
                  <td class="dependencies-cell">
                    <% if gem.runtime&.any? %>
                      <div class="table-deps">
                        <% gem.runtime.first(3).each do |dep| %>
                          <span class="dep-badge-table <%= 'rails-dep' if dep['name'] == 'rails' %>" 
                                title="<%= dep['name'] %> <%= dep['requirements'] %>">
                            <%= dep['name'] %>
                          </span>
                        <% end %>
                        <% if gem.runtime.size > 3 %>
                          <span class="dep-more-table" 
                                title="<%= gem.runtime.drop(3).map { |d| "#{d['name']} #{d['requirements']}" }.join(', ') %>">
                            +<%= gem.runtime.size - 3 %>
                          </span>
                        <% end %>
                      </div>
                    <% else %>
                      <span class="text-muted">None</span>
                    <% end %>
                  </td>
                </tr>
              <% end %>
            </tbody>
          </table>
        </div>
      </div>
      
      <!-- Results Info -->
      <div class="results-info" id="results-info">
        <span id="results-count"><%= @gems.size %></span> gems found
      </div>
    <% else %>
      <div class="empty-state">
        <div class="empty-icon">üîç</div>
        <div class="empty-title">No Gem Data Found</div>
        <div class="empty-description">
          It looks like we couldn't find any gem metadata. This could happen if your Gemfile.lock is missing or the API is unavailable.
        </div>
        <div class="empty-actions">
          <%= link_to refresh_gem_metadata_path, method: :post, 
              class: "action-btn refresh-btn primary", 
              data: { turbo_method: :post } do %>
            <i class="fas fa-sync-alt"></i>
            Try Refreshing
          <% end %>
        </div>
      </div>
    <% end %>
  </div>

  <!-- Footer -->
  <div class="page-footer">
    <div class="footer-content">
      <div class="footer-links">
        <%= link_to "https://railsbump.org", 
            class: "footer-link external",
            target: "_blank", 
            rel: "noopener" do %>
          <i class="fas fa-external-link-alt"></i>
          Run full Rails compatibility scan on RailsBump
        <% end %>
      </div>
      <div class="footer-stats">
        Last updated: <span id="last-updated">just now</span>
      </div>
    </div>
  </div>
</div>

<style>
  /* Modern Gem Metadata Index Styles */
  .gem-metadata-index {
    min-height: 100vh;
    background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
    padding: 2rem;
  }

  /* Page Header */
  .page-header {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border-radius: 16px;
    padding: 2rem;
    margin-bottom: 2rem;
    color: white;
    box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1);
  }

  .header-content {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .header-title-section {
    flex: 1;
  }

  .page-title {
    font-size: 2rem;
    font-weight: 700;
    margin: 0 0 0.5rem 0;
    display: flex;
    align-items: center;
    gap: 0.75rem;
  }

  .page-icon {
    font-size: 2.25rem;
  }

  .page-subtitle {
    font-size: 1rem;
    opacity: 0.9;
    font-weight: 400;
  }

  .header-actions {
    display: flex;
    gap: 1rem;
  }

  .action-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.5rem;
    border-radius: 8px;
    text-decoration: none;
    font-weight: 600;
    font-size: 0.875rem;
    transition: all 0.2s ease;
    border: 1px solid transparent;
  }

  .refresh-btn {
    background: rgba(255, 255, 255, 0.2);
    color: white;
    backdrop-filter: blur(10px);
  }

  .refresh-btn:hover {
    background: rgba(255, 255, 255, 0.3);
    color: white;
    transform: translateY(-1px);
  }

  .refresh-btn.primary {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
  }

  /* Stats Overview */
  .stats-overview {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
  }

  .stat-card {
    background: white;
    border-radius: 12px;
    padding: 1.5rem;
    display: flex;
    align-items: center;
    gap: 1rem;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    border: 1px solid rgba(0, 0, 0, 0.05);
    transition: transform 0.2s ease;
  }

  .stat-card:hover {
    transform: translateY(-2px);
  }

  .stat-icon {
    font-size: 2rem;
    width: 60px;
    height: 60px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 12px;
    background: #f8fafc;
  }

  .stat-card.total .stat-icon {
    background: linear-gradient(135deg, #e0f2fe 0%, #b3e5fc 100%);
  }

  .stat-card.outdated .stat-icon {
    background: linear-gradient(135deg, #fff3e0 0%, #ffcc02 50%);
  }

  .stat-card.up-to-date .stat-icon {
    background: linear-gradient(135deg, #e8f5e8 0%, #c8e6c9 100%);
  }

  .stat-card.unavailable .stat-icon {
    background: linear-gradient(135deg, #fafafa 0%, #eeeeee 100%);
  }

  .stat-content {
    flex: 1;
  }

  .stat-number {
    font-size: 2rem;
    font-weight: 700;
    color: #1f2937;
    margin-bottom: 0.25rem;
  }

  .stat-label {
    font-size: 0.875rem;
    color: #6b7280;
    font-weight: 500;
  }

  /* Search and Filters */
  .search-filters {
    background: white;
    border-radius: 12px;
    padding: 1.5rem;
    margin-bottom: 2rem;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    border: 1px solid rgba(0, 0, 0, 0.05);
  }

  .search-section {
    margin-bottom: 1.5rem;
  }

  .search-input-wrapper {
    position: relative;
    max-width: 400px;
  }

  .search-icon {
    position: absolute;
    left: 1rem;
    top: 50%;
    transform: translateY(-50%);
    color: #9ca3af;
    font-size: 0.875rem;
  }

  .search-input {
    width: 100%;
    padding: 0.75rem 1rem 0.75rem 2.5rem;
    border: 2px solid #e5e7eb;
    border-radius: 8px;
    font-size: 0.875rem;
    transition: all 0.2s ease;
    background: #f9fafb;
  }

  .search-input:focus {
    outline: none;
    border-color: #667eea;
    background: white;
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
  }

  .clear-search {
    position: absolute;
    right: 0.75rem;
    top: 50%;
    transform: translateY(-50%);
    background: none;
    border: none;
    color: #9ca3af;
    cursor: pointer;
    padding: 0.25rem;
    border-radius: 4px;
    transition: color 0.2s ease;
  }

  .clear-search:hover {
    color: #6b7280;
  }

  .filters-section {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    align-items: center;
  }

  .filter-group {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .filter-label {
    font-size: 0.875rem;
    font-weight: 600;
    color: #374151;
    margin: 0;
  }

  .filter-select {
    padding: 0.5rem 0.75rem;
    border: 1px solid #d1d5db;
    border-radius: 6px;
    font-size: 0.875rem;
    background: white;
    color: #374151;
    cursor: pointer;
    transition: border-color 0.2s ease;
  }

  .filter-select:focus {
    outline: none;
    border-color: #667eea;
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
  }

  .reset-filters {
    padding: 0.5rem 1rem;
    background: #f3f4f6;
    border: 1px solid #d1d5db;
    border-radius: 6px;
    font-size: 0.875rem;
    color: #374151;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    transition: all 0.2s ease;
  }

  .reset-filters:hover {
    background: #e5e7eb;
  }

  /* View Toggle */
  .view-toggle-group {
    display: flex;
    align-items: center;
    gap: 0.75rem;
  }

  .view-toggle {
    display: flex;
    background: #f3f4f6;
    border-radius: 8px;
    padding: 0.25rem;
    border: 1px solid #d1d5db;
  }

  .view-toggle-btn {
    padding: 0.5rem 0.75rem;
    background: transparent;
    border: none;
    border-radius: 6px;
    font-size: 0.875rem;
    color: #6b7280;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    min-width: 2.5rem;
  }

  .view-toggle-btn:hover {
    color: #374151;
    background: rgba(255, 255, 255, 0.5);
  }

  .view-toggle-btn.active {
    background: #667eea;
    color: white;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }

  .view-toggle-btn i {
    font-size: 0.875rem;
  }

  /* Export Button */
  .export-group {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .export-btn {
    padding: 0.5rem 1rem;
    background: linear-gradient(135deg, #10b981 0%, #059669 100%);
    color: white;
    border: none;
    border-radius: 6px;
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    transition: all 0.2s ease;
  }

  .export-btn:hover {
    background: linear-gradient(135deg, #059669 0%, #047857 100%);
    transform: translateY(-1px);
    box-shadow: 0 4px 8px -2px rgba(16, 185, 129, 0.3);
  }

  /* Gems Grid */
  .gems-container {
    background: white;
    border-radius: 12px;
    padding: 1.5rem;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    border: 1px solid rgba(0, 0, 0, 0.05);
    margin-bottom: 2rem;
  }

  .gems-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 1.5rem;
  }

  .gem-card-full {
    background: #fafafa;
    border: 1px solid #e5e7eb;
    border-radius: 12px;
    padding: 1.5rem;
    transition: all 0.3s ease;
    animation: fadeInUp 0.6s ease-out both;
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .gem-card-full:hover {
    transform: translateY(-4px);
    box-shadow: 0 12px 30px -5px rgba(0, 0, 0, 0.15);
    border-color: #d1d5db;
    background: white;
  }

  .gem-card-full.unavailable {
    opacity: 0.7;
    background: #f9fafb;
    border-color: #e5e7eb;
  }

  .gem-card-header {
    margin-bottom: 1.25rem;
  }

  .gem-title-section {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    gap: 1rem;
  }

  .gem-name {
    font-size: 1.25rem;
    font-weight: 700;
    color: #1f2937;
    margin: 0;
    flex: 1;
  }

  .gem-status-badges {
    display: flex;
    gap: 0.5rem;
  }

  .status-badge {
    font-size: 0.75rem;
    padding: 0.375rem 0.75rem;
    border-radius: 8px;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 0.375rem;
    text-transform: uppercase;
    letter-spacing: 0.025em;
  }

  .status-badge.upgrade-available {
    background: linear-gradient(135deg, #fef3c7 0%, #fcd34d 100%);
    color: #d97706;
    border: 1px solid #f59e0b;
  }

  .status-badge.up-to-date {
    background: linear-gradient(135deg, #d1fae5 0%, #a7f3d0 100%);
    color: #059669;
    border: 1px solid #10b981;
  }

  .status-badge.unavailable {
    background: linear-gradient(135deg, #f3f4f6 0%, #e5e7eb 100%);
    color: #6b7280;
    border: 1px solid #d1d5db;
  }

  .gem-card-body {
    display: flex;
    flex-direction: column;
    gap: 1.25rem;
  }

  .versions-section {
    background: white;
    border-radius: 8px;
    padding: 1rem;
    border: 1px solid #f3f4f6;
  }

  .version-group {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1rem;
  }

  .version-item {
    display: flex;
    flex-direction: column;
    gap: 0.375rem;
  }

  .version-label {
    font-size: 0.75rem;
    color: #6b7280;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .version-badge {
    font-family: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace;
    font-size: 0.875rem;
    padding: 0.5rem 0.75rem;
    border-radius: 6px;
    font-weight: 600;
    text-align: center;
    border: 1px solid transparent;
  }

  .version-badge.current {
    background: linear-gradient(135deg, #dbeafe 0%, #bfdbfe 100%);
    color: #1d4ed8;
    border-color: #3b82f6;
  }

  .version-badge.latest {
    background: linear-gradient(135deg, #dcfce7 0%, #bbf7d0 100%);
    color: #166534;
    border-color: #22c55e;
  }

  .version-badge.unknown {
    background: #f9fafb;
    color: #6b7280;
    border-color: #e5e7eb;
  }

  .gem-info-section {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .release-info, .gem-description {
    display: flex;
    align-items: flex-start;
    gap: 0.5rem;
    font-size: 0.875rem;
    color: #6b7280;
  }

  .gem-description {
    line-height: 1.5;
  }

  .dependencies-section {
    border-top: 1px solid #f3f4f6;
    padding-top: 1rem;
  }

  .deps-header {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.875rem;
    color: #6b7280;
    font-weight: 600;
    margin-bottom: 0.75rem;
  }

  .deps-grid {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .dep-badge {
    font-size: 0.75rem;
    padding: 0.375rem 0.75rem;
    border-radius: 8px;
    background: #f8fafc;
    color: #374151;
    font-weight: 500;
    border: 1px solid #e5e7eb;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.125rem;
    min-width: 60px;
  }

  .dep-badge.rails-dep {
    background: linear-gradient(135deg, #fef3c7 0%, #fcd34d 100%);
    color: #d97706;
    border-color: #f59e0b;
    font-weight: 700;
  }

  .dep-version {
    font-size: 0.625rem;
    opacity: 0.8;
    font-family: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace;
  }

  .dep-more {
    font-size: 0.75rem;
    color: #6b7280;
    font-weight: 600;
    cursor: help;
    padding: 0.375rem 0.75rem;
    border-radius: 8px;
    background: #f3f4f6;
    border: 1px solid #d1d5db;
  }

  .results-info {
    text-align: center;
    padding: 1rem;
    font-size: 0.875rem;
    color: #6b7280;
    font-weight: 500;
  }

  /* Table View */
  .gems-table-container {
    background: white;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    border: 1px solid rgba(0, 0, 0, 0.05);
    margin-bottom: 2rem;
  }

  .table-wrapper {
    overflow-x: auto;
  }

  .gems-table {
    width: 100%;
    border-collapse: collapse;
    font-size: 0.875rem;
  }

  .gems-table thead {
    background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
  }

  .gems-table th {
    padding: 1rem 0.75rem;
    text-align: left;
    font-weight: 600;
    color: #374151;
    border-bottom: 2px solid #e5e7eb;
    white-space: nowrap;
    position: relative;
  }

  .gems-table th.sortable {
    cursor: pointer;
    user-select: none;
    transition: background-color 0.2s ease;
  }

  .gems-table th.sortable:hover {
    background: rgba(102, 126, 234, 0.1);
  }

  .gems-table th.sortable .sort-icon {
    margin-left: 0.5rem;
    opacity: 0.3;
    transition: opacity 0.2s ease;
  }

  .gems-table th.sortable:hover .sort-icon {
    opacity: 0.7;
  }

  .gems-table th.sorted .sort-icon {
    opacity: 1;
    color: #667eea;
  }

  .gems-table tbody tr {
    transition: background-color 0.2s ease;
  }

  .gems-table tbody tr:hover {
    background: #f8fafc;
  }

  .gems-table tbody tr.unavailable {
    opacity: 0.6;
    background: #f9fafb;
  }

  .gems-table td {
    padding: 1rem 0.75rem;
    border-bottom: 1px solid #f3f4f6;
    vertical-align: top;
  }

  .gem-name-table {
    color: #1f2937;
    font-weight: 600;
  }

  .status-badge-table {
    font-size: 0.75rem;
    padding: 0.25rem 0.5rem;
    border-radius: 6px;
    font-weight: 500;
    display: inline-flex;
    align-items: center;
    gap: 0.25rem;
    white-space: nowrap;
  }

  .status-badge-table.upgrade-available {
    background: #fef3c7;
    color: #d97706;
  }

  .status-badge-table.up-to-date {
    background: #d1fae5;
    color: #059669;
  }

  .status-badge-table.unavailable {
    background: #f3f4f6;
    color: #6b7280;
  }

  .status-badge-table.unknown {
    background: #f3f4f6;
    color: #9ca3af;
  }

  .version-badge-table {
    font-family: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace;
    font-size: 0.8rem;
    padding: 0.25rem 0.5rem;
    border-radius: 6px;
    font-weight: 500;
    white-space: nowrap;
  }

  .version-badge-table.current {
    background: #dbeafe;
    color: #1d4ed8;
  }

  .version-badge-table.latest {
    background: #dcfce7;
    color: #166534;
  }

  .version-badge-table.unknown {
    background: #f3f4f6;
    color: #6b7280;
  }

  .description-cell {
    max-width: 200px;
  }

  .dependencies-cell {
    max-width: 180px;
  }

  .table-deps {
    display: flex;
    flex-wrap: wrap;
    gap: 0.25rem;
  }

  .dep-badge-table {
    font-size: 0.7rem;
    padding: 0.125rem 0.375rem;
    border-radius: 4px;
    background: #f3f4f6;
    color: #374151;
    font-weight: 500;
    white-space: nowrap;
  }

  .dep-badge-table.rails-dep {
    background: #fef3c7;
    color: #d97706;
    font-weight: 600;
  }

  .dep-more-table {
    font-size: 0.7rem;
    color: #6b7280;
    font-weight: 500;
    cursor: help;
  }

  .text-muted {
    color: #9ca3af;
  }

  /* Empty State */
  .empty-state {
    text-align: center;
    padding: 4rem 2rem;
    color: #6b7280;
  }

  .empty-icon {
    font-size: 4rem;
    margin-bottom: 1.5rem;
    opacity: 0.5;
  }

  .empty-title {
    font-size: 1.5rem;
    font-weight: 700;
    color: #374151;
    margin-bottom: 0.75rem;
  }

  .empty-description {
    margin-bottom: 2rem;
    max-width: 500px;
    margin-left: auto;
    margin-right: auto;
    line-height: 1.6;
  }

  .empty-actions {
    display: flex;
    justify-content: center;
    gap: 1rem;
  }

  /* Page Footer */
  .page-footer {
    background: white;
    border-radius: 12px;
    padding: 1.5rem;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    border: 1px solid rgba(0, 0, 0, 0.05);
  }

  .footer-content {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .footer-link {
    font-size: 0.875rem;
    color: #6366f1;
    text-decoration: none;
    font-weight: 500;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    transition: color 0.2s ease;
  }

  .footer-link:hover {
    color: #4f46e5;
    text-decoration: underline;
  }

  .footer-link.external {
    color: #059669;
  }

  .footer-link.external:hover {
    color: #047857;
  }

  .footer-stats {
    font-size: 0.875rem;
    color: #6b7280;
  }

  /* Loading States */
  .refresh-btn.loading {
    opacity: 0.6;
    pointer-events: none;
  }

  .refresh-btn.loading i {
    animation: spin 1s linear infinite;
  }

  .loading-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(255, 255, 255, 0.9);
    backdrop-filter: blur(4px);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1000;
  }

  .loading-content {
    text-align: center;
    padding: 2rem;
    background: white;
    border-radius: 12px;
    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
    border: 1px solid rgba(0, 0, 0, 0.05);
  }

  .loading-spinner {
    width: 40px;
    height: 40px;
    border: 3px solid #f3f4f6;
    border-top: 3px solid #667eea;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin: 0 auto 1rem auto;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  .loading-text {
    color: #6b7280;
    font-weight: 500;
  }

  /* Responsive Design */
  @media (max-width: 1024px) {
    .gem-metadata-index {
      padding: 1rem;
    }
    
    .gems-grid {
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 1rem;
    }
  }

  @media (max-width: 768px) {
    .header-content {
      flex-direction: column;
      gap: 1.5rem;
      text-align: center;
    }

    .page-title {
      font-size: 1.75rem;
    }

    .stats-overview {
      grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
      gap: 1rem;
    }

    .filters-section {
      flex-direction: column;
      align-items: stretch;
      gap: 1rem;
    }

    .filter-group {
      justify-content: space-between;
    }

    .gems-grid {
      grid-template-columns: 1fr;
    }

    .gem-title-section {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.75rem;
    }

    .version-group {
      grid-template-columns: 1fr;
    }

    .footer-content {
      flex-direction: column;
      gap: 1rem;
      text-align: center;
    }
    
    /* Table responsive adjustments */
    .gems-table th,
    .gems-table td {
      padding: 0.75rem 0.5rem;
      font-size: 0.8rem;
    }
    
    .gems-table .description-cell,
    .gems-table .dependencies-cell {
      display: none;
    }
    
    .view-toggle-group {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.5rem;
    }
  }

  @media (max-width: 480px) {
    .gem-metadata-index {
      padding: 0.5rem;
    }

    .page-header {
      padding: 1.5rem;
    }

    .stats-overview {
      grid-template-columns: repeat(2, 1fr);
    }

    .stat-card {
      padding: 1rem;
    }

    .stat-icon {
      width: 50px;
      height: 50px;
      font-size: 1.5rem;
    }

    .stat-number {
      font-size: 1.5rem;
    }
  }

  /* Accessibility Improvements */
  @media (prefers-reduced-motion: reduce) {
    .gem-card-full,
    .action-btn,
    .stat-card {
      animation: none;
      transition: none;
    }
  }

  /* Focus States */
  .action-btn:focus,
  .search-input:focus,
  .filter-select:focus,
  .reset-filters:focus,
  .footer-link:focus {
    outline: 2px solid #667eea;
    outline-offset: 2px;
  }

  /* Print Styles */
  @media print {
    .page-header,
    .search-filters,
    .page-footer {
      display: none;
    }

    .gem-metadata-index {
      background: white;
      padding: 0;
    }

    .gems-grid {
      grid-template-columns: repeat(2, 1fr);
    }

    .gem-card-full {
      box-shadow: none;
      border: 1px solid #ccc;
      break-inside: avoid;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Enhanced search and filter functionality
    const searchInput = document.getElementById('gem-search');
    const clearSearchBtn = document.getElementById('clear-search');
    const statusFilter = document.getElementById('status-filter');
    const sortFilter = document.getElementById('sort-filter');
    const resetFiltersBtn = document.getElementById('reset-filters');
    const gemsGrid = document.getElementById('gems-grid');
    const gemsTableContainer = document.getElementById('gems-table-container');
    const gemsTable = document.getElementById('gems-table');
    const gemsTableBody = document.getElementById('gems-table-body');
    const resultsInfo = document.getElementById('results-info');
    const resultsCount = document.getElementById('results-count');
    
    // View toggle elements
    const gridViewBtn = document.getElementById('grid-view-btn');
    const tableViewBtn = document.getElementById('table-view-btn');
    const exportGroup = document.getElementById('export-group');
    const exportTableBtn = document.getElementById('export-table-btn');
    
    // Export functionality
    function exportTableToCSV() {
      const csvData = [];
      
      // Header row
      csvData.push(['Gem Name', 'Status', 'Current Version', 'Latest Version', 'Released', 'Description', 'Dependencies']);
      
      // Data rows from filtered results
      filteredTableRows.forEach(row => {
        const cells = row.element.querySelectorAll('td');
        const rowData = [
          cells[0]?.textContent?.trim() || '',
          cells[1]?.textContent?.trim() || '',
          cells[2]?.textContent?.trim() || '',
          cells[3]?.textContent?.trim() || '',
          cells[4]?.textContent?.trim() || '',
          cells[5]?.textContent?.trim() || '',
          cells[6]?.textContent?.trim() || ''
        ];
        csvData.push(rowData);
      });
      
      // Convert to CSV format
      const csvContent = csvData.map(row => 
        row.map(field => `"${field.replace(/"/g, '""')}"`).join(',')
      ).join('\n');
      
      // Create and download file
      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
      const link = document.createElement('a');
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', `gem-metadata-${new Date().toISOString().split('T')[0]}.csv`);
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      
      showToast('Table data exported successfully!', 'success');
    }
    
    // Loading state management
    const loadingOverlay = document.getElementById('loading-overlay');
    
    function showLoading() {
      if (loadingOverlay) {
        loadingOverlay.style.display = 'flex';
      }
    }
    
    function hideLoading() {
      if (loadingOverlay) {
        loadingOverlay.style.display = 'none';
      }
    }
    
    // Performance optimizations
    let searchTimeout;
    const SEARCH_DELAY = 300; // Debounce search for better performance
    
    // Optimized search with debouncing
    function debouncedSearch() {
      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(() => {
        performSearch();
      }, SEARCH_DELAY);
    }
    
    let allGems = [];
    let allTableRows = [];
    let filteredGems = [];
    let filteredTableRows = [];
    let currentView = 'grid'; // Default to grid view
    
    // Initialize gems data
    function initializeGems() {
      // Initialize grid cards
      allGems = Array.from(document.querySelectorAll('.gem-card-full')).map(card => {
        return {
          element: card,
          name: card.dataset.gemName,
          status: card.dataset.status,
          releaseDate: parseInt(card.dataset.releaseDate) || 0
        };
      });
      
      // Initialize table rows
      allTableRows = Array.from(document.querySelectorAll('.gem-table-row')).map(row => {
        return {
          element: row,
          name: row.dataset.gemName,
          status: row.dataset.status,
          releaseDate: parseInt(row.dataset.releaseDate) || 0
        };
      });
      
      filteredGems = [...allGems];
      filteredTableRows = [...allTableRows];
      updateResults();
    }
    
    // View toggle functionality
    function switchView(view) {
      currentView = view;
      
      if (view === 'grid') {
        // Show grid, hide table
        gemsGrid.style.display = 'grid';
        gemsTableContainer.style.display = 'none';
        gridViewBtn.classList.add('active');
        tableViewBtn.classList.remove('active');
        if (exportGroup) exportGroup.style.display = 'none';
        
        // Save preference
        localStorage.setItem('gems-view-preference', 'grid');
      } else {
        // Hide grid, show table
        gemsGrid.style.display = 'none';
        gemsTableContainer.style.display = 'block';
        tableViewBtn.classList.add('active');
        gridViewBtn.classList.remove('active');
        if (exportGroup) exportGroup.style.display = 'flex';
        
        // Save preference
        localStorage.setItem('gems-view-preference', 'table');
      }
      
      // Update results for current view
      updateResults();
    }
    
    // Load saved view preference
    function loadViewPreference() {
      const savedView = localStorage.getItem('gems-view-preference') || 'grid';
      switchView(savedView);
    }
    
    // Search functionality
    function performSearch() {
      const searchTerm = searchInput.value.toLowerCase().trim();
      const statusValue = statusFilter.value;
      
      // Filter grid cards
      filteredGems = allGems.filter(gem => {
        const matchesSearch = !searchTerm || gem.name.includes(searchTerm);
        const matchesStatus = !statusValue || gem.status === statusValue;
        return matchesSearch && matchesStatus;
      });
      
      // Filter table rows
      filteredTableRows = allTableRows.filter(row => {
        const matchesSearch = !searchTerm || row.name.includes(searchTerm);
        const matchesStatus = !statusValue || row.status === statusValue;
        return matchesSearch && matchesStatus;
      });
      
      applySorting();
      updateResults();
      updateClearButton();
    }
    
    // Sorting functionality
    function applySorting() {
      const sortValue = sortFilter.value;
      
      const sortFunction = (a, b) => {
        switch (sortValue) {
          case 'name-asc':
            return a.name.localeCompare(b.name);
          case 'name-desc':
            return b.name.localeCompare(a.name);
          case 'status-desc':
            const statusOrder = { 'outdated': 0, 'unavailable': 1, 'up-to-date': 2 };
            return (statusOrder[a.status] || 3) - (statusOrder[b.status] || 3);
          case 'release-desc':
            return b.releaseDate - a.releaseDate;
          case 'release-asc':
            return a.releaseDate - b.releaseDate;
          default:
            return 0;
        }
      };
      
      filteredGems.sort(sortFunction);
      filteredTableRows.sort(sortFunction);
    }
    
    // Update display
    function updateResults() {
      if (currentView === 'grid') {
        updateGridView();
      } else {
        updateTableView();
      }
      
      // Update results count
      const count = currentView === 'grid' ? filteredGems.length : filteredTableRows.length;
      if (resultsCount) {
        resultsCount.textContent = count;
      }
      
      // Show/hide empty state
      const isEmpty = count === 0;
      if (isEmpty && !document.querySelector('.filter-empty-state')) {
        showFilterEmptyState();
      } else if (!isEmpty) {
        hideFilterEmptyState();
      }
    }
    
    // Update grid view
    function updateGridView() {
      // Hide all gems first
      allGems.forEach(gem => {
        gem.element.style.display = 'none';
        gem.element.style.order = '';
      });
      
      // Show and order filtered gems
      filteredGems.forEach((gem, index) => {
        gem.element.style.display = 'block';
        gem.element.style.order = index;
        
        // Reset animation delay for visible items
        gem.element.style.animationDelay = `${index * 0.05}s`;
      });
    }
    
    // Update table view
    function updateTableView() {
      // Hide all table rows first
      allTableRows.forEach(row => {
        row.element.style.display = 'none';
      });
      
      // Show filtered rows
      filteredTableRows.forEach((row, index) => {
        row.element.style.display = '';
      });
    }
    
    // Show empty state for filters
    function showFilterEmptyState() {
      const emptyState = document.createElement('div');
      emptyState.className = 'filter-empty-state';
      emptyState.innerHTML = `
        <div class="empty-icon">üîç</div>
        <div class="empty-title">No matching gems found</div>
        <div class="empty-description">
          Try adjusting your search terms or filters to find what you're looking for.
        </div>
        <button class="action-btn refresh-btn" onclick="resetAllFilters()">
          <i class="fas fa-undo"></i>
          Clear Filters
        </button>
      `;
      
      if (currentView === 'grid') {
        emptyState.style.cssText = `
          text-align: center;
          padding: 3rem 1rem;
          color: #6b7280;
          grid-column: 1 / -1;
        `;
        gemsGrid.appendChild(emptyState);
      } else {
        emptyState.style.cssText = `
          text-align: center;
          padding: 3rem 1rem;
          color: #6b7280;
        `;
        const emptyRow = document.createElement('tr');
        const emptyCell = document.createElement('td');
        emptyCell.colSpan = 7;
        emptyCell.appendChild(emptyState);
        emptyRow.appendChild(emptyCell);
        emptyRow.className = 'filter-empty-state-row';
        gemsTableBody.appendChild(emptyRow);
      }
    }
    
    // Hide filter empty state
    function hideFilterEmptyState() {
      const emptyState = document.querySelector('.filter-empty-state');
      const emptyRow = document.querySelector('.filter-empty-state-row');
      if (emptyState) {
        emptyState.remove();
      }
      if (emptyRow) {
        emptyRow.remove();
      }
    }
    
    // Update clear search button visibility
    function updateClearButton() {
      const hasValue = searchInput.value.trim().length > 0;
      clearSearchBtn.style.display = hasValue ? 'block' : 'none';
    }
    
    // Reset all filters
    function resetAllFilters() {
      searchInput.value = '';
      statusFilter.value = '';
      sortFilter.value = 'name-asc';
      performSearch();
      updateClearButton();
    }
    
    // Global function for empty state button
    window.resetAllFilters = resetAllFilters;
    
    // Event listeners
    if (searchInput) {
      searchInput.addEventListener('input', debouncedSearch);
      searchInput.addEventListener('input', updateClearButton);
    }
    
    if (clearSearchBtn) {
      clearSearchBtn.addEventListener('click', function() {
        searchInput.value = '';
        performSearch();
        updateClearButton();
        searchInput.focus();
      });
    }
    
    if (statusFilter) {
      statusFilter.addEventListener('change', performSearch);
    }
    
    if (sortFilter) {
      sortFilter.addEventListener('change', function() {
        applySorting();
        updateResults();
      });
    }
    
    if (resetFiltersBtn) {
      resetFiltersBtn.addEventListener('click', resetAllFilters);
    }
    
    // View toggle event listeners
    if (gridViewBtn) {
      gridViewBtn.addEventListener('click', function() {
        switchView('grid');
      });
    }
    
    if (tableViewBtn) {
      tableViewBtn.addEventListener('click', function() {
        switchView('table');
      });
    }
    
    // Export functionality event listener
    if (exportTableBtn) {
      exportTableBtn.addEventListener('click', exportTableToCSV);
    }
    
    // Table sorting functionality
    if (gemsTable) {
      const sortableHeaders = gemsTable.querySelectorAll('th.sortable');
      sortableHeaders.forEach(header => {
        header.addEventListener('click', function() {
          const sortType = this.dataset.sort;
          const currentSort = sortFilter.value;
          
          // Toggle between asc/desc for the same column
          if (currentSort.startsWith(sortType)) {
            const isAsc = currentSort.endsWith('-asc');
            sortFilter.value = `${sortType}-${isAsc ? 'desc' : 'asc'}`;
          } else {
            sortFilter.value = `${sortType}-asc`;
          }
          
          // Update visual indicators
          sortableHeaders.forEach(h => h.classList.remove('sorted'));
          this.classList.add('sorted');
          
          applySorting();
          updateResults();
        });
      });
    }
    
    // Refresh button functionality with loading state
    const refreshBtn = document.querySelector('.refresh-btn');
    if (refreshBtn) {
      refreshBtn.addEventListener('click', function(e) {
        this.classList.add('loading');
        this.setAttribute('aria-busy', 'true');
        
        // Reset loading state after a delay (or when page reloads)
        setTimeout(() => {
          this.classList.remove('loading');
          this.removeAttribute('aria-busy');
        }, 3000);
      });
    }
    
    // Keyboard shortcuts
    document.addEventListener('keydown', function(e) {
      // Ctrl/Cmd + K to focus search
      if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
        e.preventDefault();
        searchInput.focus();
        searchInput.select();
      }
      
      // Escape to clear search when focused
      if (e.key === 'Escape' && document.activeElement === searchInput) {
        resetAllFilters();
        searchInput.blur();
      }
    });
    
    // Intersection Observer for staggered animations
    if ('IntersectionObserver' in window) {
      const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry, index) => {
          if (entry.isIntersecting) {
            entry.target.style.animationPlayState = 'running';
            observer.unobserve(entry.target);
          }
        });
      }, {
        threshold: 0.1,
        rootMargin: '50px'
      });
      
      // Observe all gem cards
      document.querySelectorAll('.gem-card-full').forEach(card => {
        card.style.animationPlayState = 'paused';
        observer.observe(card);
      });
    }
    
    // Update last updated time
    function updateLastUpdatedTime() {
      const lastUpdatedElement = document.getElementById('last-updated');
      if (lastUpdatedElement) {
        const now = new Date();
        const timeString = now.toLocaleTimeString([], { 
          hour: '2-digit', 
          minute: '2-digit' 
        });
        lastUpdatedElement.textContent = `${timeString}`;
      }
    }
    
    // Toast notifications
    function showToast(message, type = 'info') {
      const toast = document.createElement('div');
      toast.className = `toast-notification ${type}`;
      toast.textContent = message;
      
      document.body.appendChild(toast);
      
      // Trigger animation
      setTimeout(() => toast.classList.add('visible'), 100);
      
      // Remove after delay
      setTimeout(() => {
        toast.classList.remove('visible');
        setTimeout(() => document.body.removeChild(toast), 300);
      }, 3000);
    }
    
    // Handle form submissions with toast feedback
    document.addEventListener('turbo:submit-start', function() {
      showToast('Refreshing gem metadata...', 'info');
    });
    
    document.addEventListener('turbo:submit-end', function(event) {
      if (event.detail.success) {
        showToast('Gem metadata updated successfully!', 'success');
        updateLastUpdatedTime();
      } else {
        showToast('Failed to update gem metadata. Please try again.', 'error');
      }
    });
    
    // Add loading animation to stats cards
    document.querySelectorAll('.stat-card').forEach((card, index) => {
      card.style.animationDelay = `${index * 0.1}s`;
      card.style.animation = 'fadeInUp 0.6s ease-out both';
    });
    
    // Enhanced keyboard navigation
    let currentCardIndex = -1;
    const cards = document.querySelectorAll('.gem-card-full');
    
    searchInput.addEventListener('keydown', function(e) {
      if (e.key === 'ArrowDown' && filteredGems.length > 0) {
        e.preventDefault();
        currentCardIndex = 0;
        filteredGems[0].element.scrollIntoView({ behavior: 'smooth', block: 'center' });
        filteredGems[0].element.focus();
      }
    });
    
    // Add tabindex to cards for keyboard navigation
    cards.forEach((card, index) => {
      card.setAttribute('tabindex', '0');
      card.addEventListener('keydown', function(e) {
        if (e.key === 'ArrowDown' && currentCardIndex < filteredGems.length - 1) {
          e.preventDefault();
          currentCardIndex++;
          filteredGems[currentCardIndex].element.scrollIntoView({ behavior: 'smooth', block: 'center' });
          filteredGems[currentCardIndex].element.focus();
        } else if (e.key === 'ArrowUp' && currentCardIndex > 0) {
          e.preventDefault();
          currentCardIndex--;
          filteredGems[currentCardIndex].element.scrollIntoView({ behavior: 'smooth', block: 'center' });
          filteredGems[currentCardIndex].element.focus();
        } else if (e.key === 'Escape') {
          searchInput.focus();
          currentCardIndex = -1;
        }
      });
    });
    
    // Initialize on page load
    initializeGems();
    loadViewPreference(); // Load saved view preference
    updateClearButton();
    updateLastUpdatedTime();
  });
</script>
